import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const { type, comparisonData, email } = await request.json()
    
    if (!type || !['pdf', 'email'].includes(type)) {
      return NextResponse.json(
        { error: 'Export type must be either "pdf" or "email"' },
        { status: 400 }
      )
    }

    if (!comparisonData) {
      return NextResponse.json(
        { error: 'Comparison data is required for export' },
        { status: 400 }
      )
    }

    if (type === 'email' && !email) {
      return NextResponse.json(
        { error: 'Email address is required for email export' },
        { status: 400 }
      )
    }

    if (type === 'pdf') {
      // Generate PDF report
      // In a real implementation, you would use a library like:
      // - jsPDF for client-side PDF generation
      // - Puppeteer for server-side HTML to PDF conversion
      // - PDFKit for programmatic PDF creation
      
      await new Promise(resolve => setTimeout(resolve, 2000)) // Simulate PDF generation

      // In a real implementation, you would:
      // 1. Generate the actual PDF file
      // 2. Save it to storage or return as base64
      // 3. Provide download link or direct file response

      return NextResponse.json({
        success: true,
        downloadUrl: '/api/download/policy-comparison-report.pdf',
        fileName: 'policy-comparison-report.pdf',
        message: 'PDF report generated successfully'
      })

    } else if (type === 'email') {
      // Send email with report
      // In a real implementation, you would use:
      // - Nodemailer with SMTP
      // - SendGrid API
      // - AWS SES
      // - Resend API
      
      await new Promise(resolve => setTimeout(resolve, 2000)) // Simulate email sending

      // In a real implementation:
      // const transporter = nodemailer.createTransporter({...})
      // await transporter.sendMail({
      //   to: email,
      //   subject: 'Insurance Policy Comparison Report',
      //   html: emailContent,
      //   attachments: [{ filename: 'report.pdf', content: pdfBuffer }]
      // })

      return NextResponse.json({
        success: true,
        recipient: email,
        message: `Report sent successfully to ${email}`
      })
    }

  } catch (error) {
    console.error('Export error:', error)
    return NextResponse.json(
      { error: 'Internal server error during export' },
      { status: 500 }
    )
  }
}

function generateEmailContent(comparisonData: Record<string, any>) {
  const comparison = comparisonData.comparison as any
  const customerSummary = comparison?.customerSummary
  const keyChanges = customerSummary?.keyChanges || []
  const recommendation = customerSummary?.recommendation || 'No recommendation available'

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Insurance Policy Comparison Report</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background-color: #f8f9fa; padding: 20px; text-align: center; }
        .content { padding: 20px; }
        .section { margin-bottom: 30px; }
        .section h2 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
        .changes-list { background-color: #f8f9fa; padding: 15px; border-radius: 5px; }
        .changes-list li { margin-bottom: 8px; }
        .recommendation { background-color: #e8f5e9; padding: 15px; border-radius: 5px; border-left: 4px solid #4caf50; }
        .footer { background-color: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Insurance Policy Comparison Report</h1>
        <p>Generated on ${new Date().toLocaleDateString()}</p>
      </div>
      
      <div class="content">
        <div class="section">
          <h2>Key Changes</h2>
          <div class="changes-list">
            <ul>
              ${keyChanges.map((change: string) => `<li>${change}</li>`).join('')}
            </ul>
          </div>
        </div>
        
        <div class="section">
          <h2>Recommendation</h2>
          <div class="recommendation">
            <p>${recommendation}</p>
          </div>
        </div>
        
        <div class="section">
          <h2>Next Steps</h2>
          <p>Please review the attached detailed comparison report and contact your insurance agent if you have any questions.</p>
        </div>
      </div>
      
      <div class="footer">
        <p>This report was generated by CompareGenie - Insurance Policy Comparison Tool</p>
        <p>For support, please contact your insurance professional</p>
      </div>
    </body>
    </html>
  `
}

// Download endpoint for generated PDFs
export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const fileName = searchParams.get('file')
  
  if (!fileName) {
    return NextResponse.json(
      { error: 'File name is required' },
      { status: 400 }
    )
  }

  // In a real implementation, you would:
  // 1. Retrieve the file from storage
  // 2. Return the file with appropriate headers
  
  // For now, return a mock PDF response
  const mockPdfContent = Buffer.from('Mock PDF content for demonstration')
  
  return new NextResponse(mockPdfContent, {
    headers: {
      'Content-Type': 'application/pdf',
      'Content-Disposition': `attachment; filename="${fileName}"`,
      'Content-Length': mockPdfContent.length.toString()
    }
  })
}
